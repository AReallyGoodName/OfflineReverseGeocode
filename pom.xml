<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	
	<!-- LuxTrust fork of offline reverse-geocode library -->
	
    <groupId>eu.daxiongmao.geocode</groupId>
    <artifactId>offline-reverse-geocoding</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>Offline Reverse Geocoding Java library</name>
    <url>http://github.com/AReallyGoodName/OfflineReverseGeocode</url>
	<description>This API takes a coordinate (latitude, longitude) and finds the closest city, address, street or crossing street nearest to the point - depending on the loaded file(s). It just need to be instantiated once (cost ~2Mb in memory).</description>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        </license>
    </licenses>

	<developers>
		<!-- Library creation 2014 -->
		<developer>
			<name>Daniel Glasson</name>
			<organizationUrl>https://github.com/AReallyGoodName/OfflineReverseGeocode</organizationUrl>
			<timezone>UTC+01:00</timezone>
		</developer>
		<!-- Fork 2019-07 -->
		<developer>
			<name>Guillaume Diaz</name>
			<email>guillaume@qin-diaz.com</email>
			<organization>Daxiongmao.eu</organization>
			<organizationUrl>https://daxiongmao.eu/wiki</organizationUrl>
			<timezone>UTC+01:00</timezone>
		</developer>
	</developers>

	<scm>
		<url>https://github.com/guihome-diaz/OfflineReverseGeocode</url>
		<connection>scm:git:git@github.com:guihome-diaz/OfflineReverseGeocode.git</connection>
		<developerConnection>scm:git:git@github.com:guihome-diaz/OfflineReverseGeocode.git</developerConnection>
	</scm>

	<properties>
		<java.version>11</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

    <build>
		<plugins>		
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${java.version}</release>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            
            <!--  To generate test coverage reports -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.4</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>		
		</plugins>
    </build>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.5.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
  
</project>