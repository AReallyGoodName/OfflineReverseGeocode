<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	
    <groupId>eu.daxiongmao.geocode</groupId>
    <artifactId>offline-reverse-geocoding</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>Offline Reverse Geocoding Java library</name>
    <url>http://github.com/AReallyGoodName/OfflineReverseGeocode</url>
	<description>This API takes a coordinate (latitude, longitude) and finds the closest city, address, street or crossing street nearest to the point - depending on the loaded file(s). It just need to be instantiated once (cost ~2Mb in memory).</description>

	<!-- Legal aspects -->
    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        	<distribution>repo</distribution>
        </license>
    </licenses>

	<developers>
		<!-- Library creation 2014 -->
		<developer>
			<name>Daniel Glasson</name>
			<organizationUrl>https://github.com/AReallyGoodName/OfflineReverseGeocode</organizationUrl>
			<timezone>UTC+01:00</timezone>
		</developer>
		<!-- Fork 2019-07 -->
		<developer>
			<name>Guillaume Diaz</name>
			<url>http://www.daxiongmao.eu/wiki</url>
			<email>guillaume@qin-diaz.com</email>
			<organization>Daxiongmao.eu</organization>
			<organizationUrl>https://daxiongmao.eu/wiki</organizationUrl>
			<timezone>UTC+01:00</timezone>
		</developer>
	</developers>

	<!-- Source code original location -->
	<scm>
		<url>https://github.com/guihome-diaz/OfflineReverseGeocode</url>
		<connection>scm:git:git@github.com:guihome-diaz/OfflineReverseGeocode.git</connection>
		<developerConnection>scm:git:git@github.com:guihome-diaz/OfflineReverseGeocode.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<!-- Deploy to Maven central Sonatype (mvnrepository.com) -->
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<properties>
		<java.version>11</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

    <build>
		<plugins>
            <!-- Compilation settings -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${java.version}</release>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

			<!-- Generate source artifact to upload along the binaries, this help debug mode -->
			<!-- This is mandatory for publication on Maven Central -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		
			<!-- Generate javadoc to ease API browsing -->
			<!-- This is mandatory for publication on Maven Central -->			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.1</version>
				<configuration>
					<sourcepath>src/main/java</sourcepath>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
            <!--  To generate test coverage reports (for Codacy & Sonarqube) -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.4</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>		
		</plugins>
    </build>

	<dependencies>
		<!-- Unit tests -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.5.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<profiles>
		<!-- Profile to use when we want to deploy on Maven central -->
		<!-- Usage: mvn clean install -Prelease -->
		
		<!-- This is based on the following resources:
				* How-to build and upload artifacts to Maven Central: https://dracoblue.net/dev/uploading-snapshots-and-releases-to-maven-central-with-travis/
				* PGP signature generation: https://central.sonatype.org/pages/working-with-pgp-signatures.html
		-->
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<!-- To prepare artifacts before shipment to Nexus (MVN central) -->
					<!-- a) Do not forget to install GPG and generate the keys -->
					<!--    gpg —full-generate-key                                   # generate key -->
					<!--    gpg —keyserver keyserver.ubuntu.com —send-keys ${keyId}  # upload key to remote server -->
					<!--    gpg —list-secret-keys —keyid-format LONG                 # view keys -->
					<!-- b) export keys -->
					<!--    gpg -a —export-secret-keys guillaume@qin-diaz.com | base64 -->
					<!--    gpg —armor —export ${keyId}                            # Export public key -->
					<!-- see: https://dracoblue.net/dev/uploading-snapshots-and-releases-to-maven-central-with-travis/ -->
					<!-- c) update TRAVIS -->
					<!-- d) Do not forget to update your maven settings.xml -->
					<!-- See: -->
					<plugin>
						<artifactId>maven-deploy-plugin</artifactId>
						<version>2.8.2</version>
						<executions>
							<execution>
								<id>default-deploy</id>
								<phase>deploy</phase>
								<goals>
									<goal>deploy</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- To sign the artifact before release -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- To check if deployment is possible or not with current configuration on remote NEXUS server -->
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.8</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<autoReleaseAfterClose>true</autoReleaseAfterClose>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>